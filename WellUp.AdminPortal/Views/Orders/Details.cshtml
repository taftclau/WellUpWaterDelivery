<!--WellUp.AdminPortal\Views\Orders\Details.cshtml-->
@model WellUp.AdminPortal.Models.ViewModels.OrderDetailViewModel
@{
    ViewData["Title"] = $"Order {Model.OrderNumber}";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";

    var statusBadgeClass = Model.Status switch
    {
        "new" => "primary",
        "in_progress" => "info",
        "completed" => "success",
        "cancelled" => "danger",
        _ => "secondary"
    };
}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                    <h1>Order #@Model.OrderNumber</h1>
                    <p class="text-muted mb-0">
                        Placed on @Model.OrderDate.ToString("MMMM d, yyyy") at @Model.OrderDate.ToString("h:mm tt") |
                        <span class="badge bg-@statusBadgeClass">@Model.FormattedStatus</span>
                    </p>
                </div>
                <div class="d-flex">
                    <a href="@Url.Action("Index", "Orders")" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Orders
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Customer & Order Info -->
    <div class="col-lg-4 mb-4">
        <div class="card h-100">
            <div class="card-header">
                <h2>Customer Information</h2>
            </div>
            <div class="card-body">
                <div class="mb-4">
                    <div class="mb-1 text-muted">Customer Name</div>
                    <div class="fw-bold">@Model.CustomerName</div>
                </div>
                <div class="mb-4">
                    <div class="mb-1 text-muted">Contact Details</div>
                    <div><i class="fas fa-envelope me-2"></i>@Model.CustomerEmail</div>
                    <div><i class="fas fa-phone me-2"></i>@Model.CustomerPhone</div>
                </div>
                <div class="mb-4">
                    <div class="mb-1 text-muted">Delivery Address</div>
                    <div>@Model.DeliveryAddress</div>
                </div>

                @if (Model.PreferredDeliveryTime.HasValue)
                {
                    <div class="mb-4">
                        <div class="mb-1 text-muted">Preferred Delivery Time</div>
                        <div><i class="fas fa-calendar me-2"></i>@Model.PreferredDeliveryTime.Value.ToString("MMMM d, yyyy")</div>
                        <div><i class="fas fa-clock me-2"></i>@Model.PreferredDeliveryTime.Value.ToString("h:mm tt")</div>
                    </div>
                }

                <div class="mb-4">
                    <div class="mb-1 text-muted">Order Status</div>
                    <div>
                        <span class="badge bg-@statusBadgeClass">@Model.FormattedStatus</span>
                    </div>
                </div>

                <a href="@Url.Action("Details", "Customers", new { id = Model.CustomerId })" class="btn btn-outline-primary">
                    <i class="fas fa-user me-2"></i>View Customer Profile
                </a>
            </div>
        </div>
    </div>

    <!-- Order Items -->
    <div class="col-lg-8 mb-4">
        <div class="card h-100">
            <div class="card-header">
                <h2>Order Items</h2>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-end">Unit Price</th>
                                <th class="text-end">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.OrderItems.Any())
                            {
                                foreach (var item in Model.OrderItems)
                                {
                                    <tr>
                                        <td>@item.ProductName</td>
                                        <td class="text-center">@item.Quantity</td>
                                        <td class="text-end">₱@item.UnitPrice.ToString("N2")</td>
                                        <td class="text-end">₱@item.SubTotal.ToString("N2")</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center">No items found</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" class="text-end fw-bold">Total:</td>
                                <td class="text-end fw-bold">₱@Model.TotalAmount.ToString("N2")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delivery Information -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h2>Delivery Information</h2>
                @if (Model.Status != "completed" && Model.Status != "cancelled")
                {
                    <div class="dropdown">
                        <button class="btn btn-primary dropdown-toggle" type="button" id="deliveryActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-truck me-2"></i>Update Delivery Status
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="deliveryActionsDropdown">
                            <li>
                                <button class="dropdown-item" onclick="updateDeliveryStatus(@Model.OrderId, @(Model.Delivery?.DeliveryId.ToString() ?? "null"), 'pending')">
                                    <i class="fas fa-clock me-2 text-warning"></i>Mark as Pending
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" onclick="updateDeliveryStatus(@Model.OrderId, @(Model.Delivery?.DeliveryId.ToString() ?? "null"), 'out_for_delivery')">
                                    <i class="fas fa-truck me-2 text-info"></i>Mark as Out for Delivery
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" onclick="updateDeliveryStatus(@Model.OrderId, @(Model.Delivery?.DeliveryId.ToString() ?? "null"), 'completed')">
                                    <i class="fas fa-check-circle me-2 text-success"></i>Mark as Completed
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" onclick="updateDeliveryStatus(@Model.OrderId, @(Model.Delivery?.DeliveryId.ToString() ?? "null"), 'failed')">
                                    <i class="fas fa-times-circle me-2 text-danger"></i>Mark as Failed
                                </button>
                            </li>
                        </ul>
                    </div>
                }
            </div>
            <div class="card-body">
                @if (Model.Delivery != null)
                {
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-1 text-muted">Delivery Status</div>
                            <div>
                                @{
                                    var deliveryBadgeClass = Model.Delivery.Status switch
                                    {
                                        "pending" => "warning",
                                        "scheduled" => "primary",
                                        "out_for_delivery" => "info",
                                        "completed" => "success",
                                        "failed" => "danger",
                                        _ => "secondary"
                                    };
                                }
                                <span class="badge bg-@deliveryBadgeClass">@Model.Delivery.FormattedStatus</span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-1 text-muted">Scheduled Time</div>
                            <div>
                                @if (Model.Delivery.ScheduledTime.HasValue)
                                {
                                    <div><i class="fas fa-calendar me-2"></i>@Model.Delivery.ScheduledTime.Value.ToString("MMMM d, yyyy")</div>
                                    <div><i class="fas fa-clock me-2"></i>@Model.Delivery.ScheduledTime.Value.ToString("h:mm tt")</div>
                                }
                                else
                                {
                                    <span class="text-muted">Not scheduled</span>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-1 text-muted">Notes</div>
                            <div>@(string.IsNullOrEmpty(Model.Delivery.Notes) ? "No notes" : Model.Delivery.Notes)</div>
                        </div>
                    </div>
                    
                    <!-- Delivery Timeline -->
                    <div class="delivery-timeline mt-5">
                        <div class="row">
                            <div class="col-12">
                                <h5>Delivery Progress</h5>
                                <div class="timeline-container">
                                    <div class="timeline">
                                        <div class="timeline-step @(Model.Delivery.Status != "pending" ? "completed" : "active")">
                                            <div class="timeline-marker"></div>
                                            <div class="timeline-content">
                                                <h6>Order Received</h6>
                                                <p>@Model.OrderDate.ToString("MMM d, yyyy h:mm tt")</p>
                                            </div>
                                        </div>
                                        <div class="timeline-step @(Model.Delivery.Status == "scheduled" || Model.Delivery.Status == "out_for_delivery" || Model.Delivery.Status == "completed" ? "completed" : (Model.Delivery.Status == "pending" ? "next" : ""))">
                                            <div class="timeline-marker"></div>
                                            <div class="timeline-content">
                                                <h6>Scheduled for Delivery</h6>
                                                <p>@(Model.Delivery.ScheduledTime?.ToString("MMM d, yyyy h:mm tt") ?? "Pending")</p>
                                            </div>
                                        </div>
                                        <div class="timeline-step @(Model.Delivery.Status == "out_for_delivery" || Model.Delivery.Status == "completed" ? "completed" : (Model.Delivery.Status == "scheduled" ? "next" : ""))">
                                            <div class="timeline-marker"></div>
                                            <div class="timeline-content">
                                                <h6>Out for Delivery</h6>
                                                <p>@(Model.Delivery.Status == "out_for_delivery" || Model.Delivery.Status == "completed" ? "In progress" : "Pending")</p>
                                            </div>
                                        </div>
                                        <div class="timeline-step @(Model.Delivery.Status == "completed" ? "completed" : (Model.Delivery.Status == "out_for_delivery" ? "next" : ""))">
                                            <div class="timeline-marker"></div>
                                            <div class="timeline-content">
                                                <h6>Delivered</h6>
                                                <p>@(Model.Delivery.Status == "completed" ? "Completed" : "Pending")</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-truck-loading fa-3x text-muted mb-3"></i>
                        <h3>Delivery Not Scheduled</h3>
                        <p class="text-muted mb-3">This order doesn't have a scheduled delivery yet.</p>
                        <button class="btn btn-primary" onclick="showScheduleModal(@Model.OrderId, null, '@(Model.PreferredDeliveryTime?.ToString("yyyy-MM-ddTHH:mm") ?? DateTime.Now.AddDays(1).ToString("yyyy-MM-ddTHH:mm"))')">
                            <i class="fas fa-truck me-2"></i>Schedule Delivery
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Timeline info for completed/cancelled orders -->
@if (Model.Status == "completed" || Model.Status == "cancelled")
{
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h2>Order History</h2>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-1 text-muted">Order Date</div>
                            <div>@Model.OrderDate.ToString("MMMM d, yyyy h:mm tt")</div>
                        </div>
                        @if (Model.Status == "completed" && Model.CompletedAt.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="mb-1 text-muted">Completed Date</div>
                                <div>@Model.CompletedAt.Value.ToString("MMMM d, yyyy h:mm tt")</div>
                            </div>
                        }
                        else if (Model.Status == "cancelled" && Model.CancelledAt.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="mb-1 text-muted">Cancelled Date</div>
                                <div>@Model.CancelledAt.Value.ToString("MMMM d, yyyy h:mm tt")</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delivery Status Update Form (hidden) -->
<form id="deliveryStatusForm" method="post" action="@Url.Action("UpdateDeliveryStatus", "Orders")">
    @Html.AntiForgeryToken()
    <input type="hidden" id="statusOrderId" name="orderId">
    <input type="hidden" id="statusDeliveryId" name="deliveryId">
    <input type="hidden" id="statusDeliveryStatus" name="deliveryStatus">
</form>

<!-- Schedule Delivery Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" aria-labelledby="scheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scheduleModalLabel">Schedule Delivery</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="scheduleForm" method="post" action="@Url.Action("ScheduleDelivery", "Orders")">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="scheduleOrderId" name="orderId">
                    <input type="hidden" id="scheduleDeliveryId" name="deliveryId">
                    
                    <div class="mb-3">
                        <label for="scheduledTime" class="form-label">Scheduled Delivery Time</label>
                        <input type="datetime-local" class="form-control" id="scheduledTime" name="scheduledTime" required>
                        <div class="invalid-feedback">
                            Please select a time within 10 minutes of the preferred time.
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="notes" name="notes" rows="3" placeholder="Add any delivery instructions or notes here..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Schedule Delivery</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Schedule form validation
            $('#scheduleForm').submit(function(e) {
                const scheduledTime = new Date($('#scheduledTime').val());
                const preferredTimeStr = $('#scheduledTime').attr('data-preferred');
                
                // If there's a preferred time, validate the ±10 minutes constraint
                if (preferredTimeStr) {
                                        const preferredTime = new Date(preferredTimeStr);
                    const diffMinutes = Math.abs(scheduledTime - preferredTime) / 60000; // difference in minutes

                    if (diffMinutes > 10) {
                        e.preventDefault();
                        $('#scheduledTime').addClass('is-invalid');
                        return false;
                    }
                }

                return true;
            });
        });

        // Function to update delivery status
        function updateDeliveryStatus(orderId, deliveryId, status) {
            $('#statusOrderId').val(orderId);
            $('#statusDeliveryId').val(deliveryId);
            $('#statusDeliveryStatus').val(status);

            if (status === 'failed' && !confirm('This will cancel the order and return items to inventory. Continue?')) {
                return;
            }

            $('#deliveryStatusForm').submit();
        }

        // Function to show schedule modal
        function showScheduleModal(orderId, deliveryId, preferredTime) {
            $('#scheduleOrderId').val(orderId);
            $('#scheduleDeliveryId').val(deliveryId);
            $('#scheduledTime').val(preferredTime);
            $('#scheduledTime').attr('data-preferred', preferredTime);
            $('#scheduledTime').removeClass('is-invalid');

            // Create the 10-minute window constraint
            const preferred = new Date(preferredTime);
            const minTime = new Date(preferred.getTime() - 10 * 60000); // 10 minutes before
            const maxTime = new Date(preferred.getTime() + 10 * 60000); // 10 minutes after

            // Set min/max attributes on the datetime-local input
            $('#scheduledTime').attr('min', minTime.toISOString().slice(0, 16));
            $('#scheduledTime').attr('max', maxTime.toISOString().slice(0, 16));

            // Show the modal
            const scheduleModal = new bootstrap.Modal(document.getElementById('scheduleModal'));
            scheduleModal.show();
        }
    </script>
}