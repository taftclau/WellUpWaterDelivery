<!-- StockUpdate.cshtml -->
@inject WellUp.Core.Utilities.ProductRelationshipManager RelationshipManager
@model WellUp.AdminPortal.Models.ViewModels.StockUpdateViewModel
@{
    ViewData["Title"] = "Update Stock";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";

    var product = await Context.RequestServices.GetRequiredService<WellUp.Core.Data.WellUpDbContext>().Products.FindAsync(Model.ProductId);
    var hasRelationship = product != null && RelationshipManager.HasRelationship(product);
    var relationshipType = product != null ? RelationshipManager.GetRelationshipType(product) : WellUp.Core.Utilities.ProductRelationshipManager.RelationshipType.None;
    var baseProductId = await RelationshipManager.GetBaseProductIdAsync(Model.ProductId);
    var relatedProducts = baseProductId.HasValue
        ? new List<WellUp.Core.Database.Product>()
        : await RelationshipManager.GetRelatedProductsAsync(Model.ProductId);

}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                    <h1>Update Stock</h1>
                    <p class="text-muted mb-0">Update inventory levels for @Model.ProductName</p>
                </div>
                <div class="d-flex">
                    <a href="@Url.Action("Index", "Inventory")" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Inventory
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@if (hasRelationship && relationshipType == WellUp.Core.Utilities.ProductRelationshipManager.RelationshipType.ContainerWithRefill && baseProductId.HasValue)
{
    var baseProduct = await Context.RequestServices.GetRequiredService<WellUp.Core.Data.WellUpDbContext>().Products.FindAsync(baseProductId.Value);
    if (baseProduct != null)
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>
            <span>
                This product's stock is synchronized with <strong>@baseProduct.ProductName</strong>.
                Updating stock here will also update the container-only product.
            </span>
        </div>
    }
}
else if (hasRelationship && relatedProducts.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        <span>Updating this product's stock will also update the following related products:</span>
        <ul class="mt-2 mb-0">
            @foreach (var relatedProduct in relatedProducts)
            {
                <li>@relatedProduct.ProductName</li>
            }
        </ul>
    </div>
}

<!-- Stock Update Form -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">@Model.ProductName - Stock Update</h5>
            </div>
            <div class="card-body">
                <form asp-action="StockUpdate" method="post">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                    <input type="hidden" asp-for="ProductId" />
                    <input type="hidden" asp-for="ProductName" />
                    <input type="hidden" asp-for="CurrentStock" />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-4">
                                <label class="form-label">Current Stock</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" value="@Model.CurrentStock" disabled />
                                    <span class="input-group-text">units</span>
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label asp-for="NewStock" class="form-label">New Stock Level</label>
                                <div class="input-group">
                                    <input asp-for="NewStock" class="form-control" type="number" min="0" />
                                    <span class="input-group-text">units</span>
                                </div>
                                <span asp-validation-for="NewStock" class="text-danger"></span>
                                
                                @if (Model.CurrentStock > 0)
                                {
                                    <div class="mt-3">
                                        <div class="btn-group w-100">
                                            <button type="button" class="btn btn-outline-primary" id="add5">+5</button>
                                            <button type="button" class="btn btn-outline-primary" id="add10">+10</button>
                                            <button type="button" class="btn btn-outline-primary" id="add20">+20</button>
                                            <button type="button" class="btn btn-outline-primary" id="add50">+50</button>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <div class="mb-4">
                                <label asp-for="ChangeReason" class="form-label">Reason for Change</label>
                                <select asp-for="ChangeReason" class="form-select" id="reasonSelect">
                                    <option value="">-- Select Reason --</option>
                                    <option value="New stock received">New stock received</option>
                                    <option value="Stock adjustment">Stock adjustment</option>
                                    <option value="Inventory count correction">Inventory count correction</option>
                                    <option value="Damaged goods">Damaged goods</option>
                                    <option value="Return to supplier">Return to supplier</option>
                                    <option value="Other">Other (please specify)</option>
                                </select>
                                <div id="customReasonContainer" class="mt-2 d-none">
                                    <input type="text" id="customReason" class="form-control" placeholder="Enter custom reason..." />
                                </div>
                                <span asp-validation-for="ChangeReason" class="text-danger"></span>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100 bg-light">
                                <div class="card-body">
                                    <h5 class="card-title">Stock Change Summary</h5>
                                    
                                    <div class="mb-4 mt-4">
                                        <div class="d-flex justify-content-between">
                                            <span>Previous Stock:</span>
                                            <span class="fw-bold">@Model.CurrentStock units</span>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-4">
                                        <div class="d-flex justify-content-between">
                                            <span>New Stock Level:</span>
                                            <span class="fw-bold" id="newStockDisplay">@Model.NewStock units</span>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-4">
                                        <div class="d-flex justify-content-between">
                                            <span>Change Amount:</span>
                                            <span class="fw-bold" id="changeAmount">
                                                @{
                                                    var change = Model.NewStock - Model.CurrentStock;
                                                    var changeText = change >= 0 ? $"+{change}" : change.ToString();
                                                }
                                                @changeText units
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div class="alert mt-4" id="changeAlert">
                                        <i class="fas fa-info-circle me-2"></i>
                                        <span id="changeMessage">Stock levels will remain the same.</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-end mt-4">
                        <a asp-action="Index" class="btn btn-outline-secondary me-2">Cancel</a>
                        <button type="submit" class="btn btn-primary" id="updateButton">Update Stock</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Variables
            const currentStock = @Model.CurrentStock;
            
            // Update the summary when stock input changes
            $('#NewStock').on('change keyup', updateSummary);
            
            // Quick add buttons
            $('#add5').click(function() { modifyStock(5); });
            $('#add10').click(function() { modifyStock(10); });
            $('#add20').click(function() { modifyStock(20); });
            $('#add50').click(function() { modifyStock(50); });
            
            // Change reason select
            $('#reasonSelect').change(function() {
                const value = $(this).val();
                if (value === 'Other') {
                    $('#customReasonContainer').removeClass('d-none');
                } else {
                    $('#customReasonContainer').addClass('d-none');
                }
            });
            
            // Custom reason input
            $('#customReason').on('input', function() {
                const value = $(this).val();
                if (value) {
                    $('#ChangeReason').val(value);
                } else {
                    $('#ChangeReason').val('Other');
                }
            });
            
            // Initial update
            updateSummary();
            
            // Functions
            function modifyStock(amount) {
                const currentValue = parseInt($('#NewStock').val()) || 0;
                $('#NewStock').val(currentValue + amount);
                updateSummary();
            }
            
            function updateSummary() {
                const newStock = parseInt($('#NewStock').val()) || 0;
                const change = newStock - currentStock;
                const changeText = change >= 0 ? `+${change}` : change.toString();
                
                // Update display values
                $('#newStockDisplay').text(`${newStock} units`);
                $('#changeAmount').text(`${changeText} units`);
                
                // Update alert
                const $alert = $('#changeAlert');
                const $message = $('#changeMessage');
                
                if (change === 0) {
                    $alert.removeClass('alert-success alert-danger alert-warning').addClass('alert-info');
                    $message.text('Stock levels will remain the same.');
                } else if (change > 0) {
                    $alert.removeClass('alert-info alert-danger alert-warning').addClass('alert-success');
                    $message.text(`Stock level will increase by ${change} units.`);
                } else {
                    if (newStock === 0) {
                        $alert.removeClass('alert-info alert-success alert-warning').addClass('alert-danger');
                        $message.text(`Stock will be reduced to zero. The product will be marked as out of stock.`);
                                        } else if (newStock <= 5) {
                        $alert.removeClass('alert-info alert-success alert-danger').addClass('alert-warning');
                        $message.text(`Stock will be reduced by ${Math.abs(change)} units. Warning: Stock level will be critically low.`);
                    } else {
                        $alert.removeClass('alert-info alert-success alert-danger').addClass('alert-warning');
                        $message.text(`Stock will be reduced by ${Math.abs(change)} units.`);
                    }
                }
            }
        });
    </script>
}